<?xml version="1.0" encoding="utf-8"?>
<transfer>
  <!-- This applies the currrent @subj tag to the "ref" side of passive lu's
       and strips syntax tags from the tl/sl sides.

       To understand what this does, look at the "simple rules" at the end of the file first.
       The rules in the beginning handle more exceptional situations
       (e.g. subjects to the right of their verbs, or tags spread across det+adj)

  -->
  <section-def-cats>

    <def-cat n="any">
      <cat-item tags="*"/>
      <cat-item tags=""/>
    </def-cat>
    <def-cat n="cm">
      <cat-item tags="cm"/>
      <cat-item tags="cm.*"/>
    </def-cat>
    <def-cat n="cm-clb">
      <cat-item tags="cm.clb"/>
      <cat-item tags="cm.clb.*"/>
    </def-cat>
    <def-cat n="pr">
      <cat-item tags="pr"/>
      <cat-item tags="pr.*"/>
    </def-cat>
    <def-cat n="subj">
      <cat-item tags="*.@subj"/>
      <cat-item tags="*.@subj.*"/>
    </def-cat>
    <def-cat n="subj_OR_xubj">
      <cat-item tags="*.@subj"/>
      <cat-item tags="*.@subj.*"/>
      <cat-item tags="*.@xubj"/>
      <cat-item tags="*.@xubj.*"/>
    </def-cat>
    <def-cat n="obj_OR_s-pred">
      <cat-item tags="*.@obj"/>
      <cat-item tags="*.@obj.*"/>
      <cat-item tags="*.@s-pred"/>
      <cat-item tags="*.@s-pred.*"/>
      <cat-item tags="*.@←p-utfyll"/> <!-- Tallet@subjOuter på hvor mange@subjInner som friskmeldes@refInner publiseres@refOuter snart -->
      <cat-item tags="*.@←p-utfyll.*"/>
    </def-cat>
    <def-cat n="adj.un.sp.subj">
      <cat-item tags="adj.*.un.sp.*.@subj"/>
      <cat-item tags="adj.*.un.sp.*.@subj.*"/>
      <cat-item tags="adj.un.sp.*.@subj"/>
      <cat-item tags="adj.un.sp.*.@subj.*"/>
      <cat-item tags="adj.*.un.sp.*.@xubj"/>
      <cat-item tags="adj.*.un.sp.*.@xubj.*"/>
      <cat-item tags="adj.un.sp.*.@xubj"/>
      <cat-item tags="adj.un.sp.*.@xubj.*"/>
    </def-cat>
    <def-cat n="adj.pp">
      <cat-item tags="adj.pp.*"/>
    </def-cat>
    <def-cat n="lexadj_adv">
      <cat-item tags="adj.pst.*.@adv"/>
      <cat-item tags="adj.comp.*.@adv"/>
      <cat-item tags="adj.sup.*.@adv"/>
      <cat-item tags="adj.sint.*.@adv"/>
      <cat-item tags="adj.pst.*.@adv.*"/>
      <cat-item tags="adj.comp.*.@adv.*"/>
      <cat-item tags="adj.sup.*.@adv.*"/>
      <cat-item tags="adj.sint.*.@adv.*"/>
    </def-cat>
    <def-cat n="lexadj">
      <cat-item tags="adj.pst.*"/>
      <cat-item tags="adj.comp.*"/>
      <cat-item tags="adj.sup.*"/>
      <cat-item tags="adj.sint.*"/>
    </def-cat>
    <def-cat n="fv">
      <cat-item tags="*.@fv"/>
      <cat-item tags="*.@fv.*"/>
    </def-cat>
    <def-cat n="adv_OR_detR_OR_cmp">
      <cat-item tags="adv"/>    <!-- NOT @adv – don't want to match head of adverbial clause here, just lone adverbs -->
      <cat-item tags="adv.*"/>
      <cat-item tags="*.@det→"/>
      <cat-item tags="*.@det→.*"/>
      <cat-item tags="*.cmp"/>
    </def-cat>
    <def-cat n="detR">
      <cat-item tags="*.@det→"/>
      <cat-item tags="*.@det→.*"/>
    </def-cat>
    <def-cat n="adjR_OR_cmp">
      <cat-item tags="*.@adj→"/>
      <cat-item tags="*.@adj→.*"/>
      <cat-item tags="adj.*.@adv→"/>
      <cat-item tags="adj.*.@adv→.*"/>
      <cat-item tags="*.cmp"/>
    </def-cat>
    <def-cat n="sent">
      <cat-item tags="sent.*"/>
      <cat-item tags="sent"/>
    </def-cat>
    <def-cat n="sent_OR_at.clb">
      <cat-item tags="sent.*"/>
      <cat-item tags="sent"/>
      <cat-item lemma="at" tags="cnjcoo.clb"/>
      <cat-item lemma="at" tags="cnjcoo.clb.*"/>
    </def-cat>
  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_syntax">
      <attr-item tags="@fv"/>
      <attr-item tags="@iv"/>
      <attr-item tags="@subj"/>
      <attr-item tags="@xubj"/>
      <attr-item tags="@obj"/>
      <attr-item tags="@i-obj"/>
      <attr-item tags="@s-pred"/>
      <attr-item tags="@o-pred"/>
      <attr-item tags="@adv"/>
      <attr-item tags="@adv→"/>
      <attr-item tags="@←adv"/>
      <attr-item tags="@app"/>
      <attr-item tags="@tittel"/>
      <attr-item tags="@det→"/>
      <attr-item tags="@←det"/>
      <attr-item tags="@subst→"/>
      <attr-item tags="@←subst"/>
      <attr-item tags="@←p-utfyll"/>
      <attr-item tags="@interj"/>
      <attr-item tags="@adj→"/>
      <attr-item tags="@kon"/>
      <attr-item tags="@laus-np"/>
      <attr-item tags="@←sbu"/>
      <attr-item tags="@←sbu-rel"/>
      <attr-item tags="@s-gr"/>
    </def-attr>
    <def-attr n="a_prop">
      <attr-item tags="cog"/>
      <attr-item tags="ant"/>
      <attr-item tags="org"/>
      <attr-item tags="top"/>
      <attr-item tags="al"/>
      <attr-item tags="attr"/>
      <attr-item tags="cgguess"/>
      <attr-item tags="guess"/>
    </def-attr>
    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="mf"/>
      <attr-item tags="nt"/>
      <attr-item tags="f"/>
      <attr-item tags="un"/>
      <attr-item tags="GD"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="sg"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
      <attr-item tags="ND"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="cur_subj"/>
    <def-var n="prev_subj"/>
    <def-var n="cur_subj_genswitch"/>
    <def-var n="prev_subj_genswitch"/>
    <def-var n="lexadj_ref"/>
  </section-def-vars>

  <section-def-lists>
    <def-list n="l_foo">
      <list-item v="foo"/>
    </def-list>
  </section-def-lists>

  <section-def-macros>
    <def-macro n="set_cur_subj" npar="1">
      <let><var n="prev_subj"/><var n="cur_subj"/></let>
      <let><var n="prev_subj_genswitch"/><var n="cur_subj_genswitch"/></let>
      <let><var n="cur_subj"/><clip pos="1" side="tl" part="whole"/></let>
      <choose>
        <when c="Word changed gender to or from nt">
          <test>
            <or>
              <and>
                <not><equal><clip pos="1" side="sl" part="gen"/><clip pos="1" side="tl" part="gen"/></equal></not>
                <or>
                  <equal><clip pos="1" side="sl" part="gen"/><lit-tag v="nt"/></equal>
                  <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="nt"/></equal>
                </or>
              </and>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
            </or>
          </test>
          <let><var n="cur_subj_genswitch"/><lit v="YES"/></let>
        </when>
        <otherwise>
          <let><var n="cur_subj_genswitch"/><lit v=""/></let>
        </otherwise>
      </choose>

    </def-macro>
  </section-def-macros>


  <section-rules>


    <!-- ***** Exceptional rules first: subjects after verbs + relative clause/subordination subjects ***** -->

    <!-- SHIFTING RULES (postsubj: use a following subject) -->
    <rule c="«selges kuene» – handle a following (non-relative) subject">
      <pattern>
        <pattern-item n="fv"/>
        <pattern-item n="subj"/>
      </pattern>
      <action>
        <call-macro n="set_cur_subj"><with-param pos="2"/></call-macro>
        <let><clip pos="1" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="1" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <out>
          <lu>
            <clip pos="1" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="1" side="tl" part="whole"/>
            <lit v="/"/>
            <var n="cur_subj"/><lit-tag v="postsubj"/> <!-- notify t1x that we can place participle after a subject -->
          </lu>
        </out>
        <reject-current-rule shifting="yes"/> <!-- only output first pattern, then move one word -->
      </action>
    </rule>
    <rule c="«selges nok kuene» – handle a following subject with intervening adv/det/cmp">
      <pattern>
        <pattern-item n="fv"/>
        <pattern-item n="adv_OR_detR_OR_cmp"/>
        <pattern-item n="subj"/>
      </pattern>
      <action>
        <call-macro n="set_cur_subj"><with-param pos="3"/></call-macro>
        <let><clip pos="1" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="1" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <out>
          <lu>
            <clip pos="1" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="1" side="tl" part="whole"/>
            <lit v="/"/>
            <var n="cur_subj"/><lit-tag v="postsubj"/> <!-- notify t1x that we can place participle after a subject -->
          </lu>
        </out>
        <reject-current-rule shifting="yes"/> <!-- only output first pattern, then move one word -->
      </action>
    </rule>
    <rule c="«selges de fine kuene» – handle a following subject with intervening det+adj">
      <pattern>
        <pattern-item n="fv"/>
        <pattern-item n="detR"/>
        <pattern-item n="adjR_OR_cmp"/>
        <pattern-item n="subj"/>
      </pattern>
      <action>
        <call-macro n="set_cur_subj"><with-param pos="4"/></call-macro>
        <let><clip pos="1" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="1" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <out>
          <lu>
            <clip pos="1" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="1" side="tl" part="whole"/>
            <lit v="/"/>
            <var n="cur_subj"/><lit-tag v="postsubj"/> <!-- notify t1x that we can place participle after a subject -->
          </lu>
        </out>
        <reject-current-rule shifting="yes"/> <!-- only output first pattern, then move one word -->
      </action>
    </rule>
    <rule c="«selges de mest omstridte kuene» – handle a following subject with intervening det+adj">
      <pattern>
        <pattern-item n="fv"/>
        <pattern-item n="detR"/>
        <pattern-item n="adjR_OR_cmp"/>
        <pattern-item n="adjR_OR_cmp"/>
        <pattern-item n="subj"/>
      </pattern>
      <action>
        <call-macro n="set_cur_subj"><with-param pos="5"/></call-macro>
        <let><clip pos="1" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="1" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <out>
          <lu>
            <clip pos="1" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="1" side="tl" part="whole"/>
            <lit v="/"/>
            <var n="cur_subj"/><lit-tag v="postsubj"/> <!-- notify t1x that we can place participle after a subject -->
          </lu>
        </out>
        <reject-current-rule shifting="yes"/> <!-- only output first pattern, then move one word -->
      </action>
    </rule>
    <!-- /SHIFTING RULES -->


    <rule c="Ungendered adjective-subject takes gender/number from preceding determiner
             «Den første beskrives som …»
             «Da må tjenester til barn og unge være de siste som skaleres ned eller stenges.»
             ">
      <pattern>
        <pattern-item n="detR"/>
        <pattern-item n="adj.un.sp.subj"/>
      </pattern>
      <action>
        <call-macro n="set_cur_subj"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="1" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <let><clip pos="2" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="2" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <out>
          <lu>
            <clip pos="1" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="1" side="tl" part="whole"/>
            <lit v="/"/>
            <clip pos="1" side="ref" part="whole"/>
          </lu>
          <b/>
          <lu>
            <clip pos="2" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="2" side="tl" part="whole"/>
            <lit v="/"/>
            <var n="cur_subj"/>
          </lu>
        </out>
      </action>
    </rule>

    <rule c="Nominal adjective keeps gender/number (ignore preceding subject)
             «10.700 sysselsatte»">
      <pattern>
        <pattern-item n="detR"/>
        <pattern-item n="adj.pp"/>
      </pattern>
      <action>
        <let><clip pos="1" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="1" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <let><clip pos="2" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="2" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <out>
          <lu>
            <clip pos="1" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="1" side="tl" part="whole"/>
            <lit v="/"/>
            <var n="cur_subj"/>
          </lu>
          <b/>
          <lu>
            <clip pos="2" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="2" side="tl" part="whole"/>
            <lit v="/"/>
            <clip pos="2" side="ref" part="whole"/>
          </lu>
        </out>
      </action>
    </rule>

    <!-- ***** The simple rules: Store, Clear, Apply ***** -->

    <rule c="Found a subject, store it in variable">
      <pattern>
        <pattern-item n="subj_OR_xubj"/>
      </pattern>
      <action>
        <call-macro n="set_cur_subj"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="1" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <out>
          <lu>
            <clip pos="1" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="1" side="tl" part="whole"/>
            <lit v="/"/>
            <var n="cur_subj"/>
          </lu>
        </out>
      </action>
    </rule>

    <rule c="Clear the prev- and current-subject variables on sentence end or ‘that’">
      <pattern>
        <pattern-item n="sent_OR_at.clb"/>
      </pattern>
      <action>
        <let><clip pos="1" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="1" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <out>
          <lu>
            <clip pos="1" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="1" side="tl" part="whole"/>
            <lit v="/"/>
            <var n="cur_subj"/>
          </lu>
        </out>
        <let><var n="prev_subj"/><lit v=""/></let>
        <let><var n="cur_subj"/><lit v=""/></let>
        <let><var n="prev_subj_genswitch"/><lit v=""/></let>
        <let><var n="cur_subj_genswitch"/><lit v=""/></let>
      </action>
    </rule>

    <!-- TODO: also switch on seeing «og som», as in «plattformen som de fire partiene forhandlet frem, og som ble godkjent» -->
    <rule c="Switch to prev subject variable on clause boundary comma">
      <pattern>
        <pattern-item n="cm-clb"/>
      </pattern>
      <action>
        <choose><when>
          <test><not><equal><var n="prev_subj"/><lit v=""/></equal></not></test>
          <let><var n="cur_subj"/><var n="prev_subj"/></let>
          <let><var n="cur_subj_genswitch"/><var n="prev_subj_genswitch"/></let>
          <let><var n="prev_subj"/><lit v=""/></let>
          <let><var n="prev_subj_genswitch"/><lit v=""/></let>
        </when></choose>
        <reject-current-rule shifting="no"/>
      </action>
    </rule>

    <rule c="Lexical/non-pp adj special handling: Only add ref (only agree) if @s-pred and subject gender switched to/from nt:
             Ie. not for adverbial usage like
             - Tallene er sterkt@adv dominert
             - Det vi har fått til teknologisk">
      <pattern>
        <pattern-item n="lexadj"/>
      </pattern>
      <action>
        <choose>
          <when c="Override (ie. do add refsyn) if gender switched and we're predicative">
            <test><and>
              <equal><var n="cur_subj_genswitch"/><lit v="YES"/></equal>
              <equal><clip pos="1" side="tl" part="a_syntax"/><lit-tag v="@s-pred"/></equal>
            </and></test>
            <let><var n="lexadj_ref"/><var n="cur_subj"/></let>
          </when>
          <otherwise c="Adverbials or where subject gender stayed the same shouldn't agree">
            <let><var n="lexadj_ref"/><clip pos="1" side="tl" part="whole"/></let>
          </otherwise>
        </choose>
        <let><clip pos="1" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="1" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <out>
          <lu>
            <clip pos="1" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="1" side="tl" part="whole"/>
            <lit v="/"/>
            <var n="lexadj_ref"/>
          </lu>
        </out>
      </action>
    </rule>

    <rule c="Add the current subject to the ref field of the lexical unit, clear syntax tags">
      <pattern>
        <pattern-item n="any"/>
      </pattern>
      <action>
        <let><clip pos="1" side="tl" part="a_syntax"/><lit v=""/></let>
        <let><clip pos="1" side="sl" part="a_syntax"/><lit v=""/></let> <!-- preprocess-transfer gives a mistaken warning – this does have effect -->
        <out>
          <lu>
            <clip pos="1" side="sl" part="whole"/>
            <lit v="/"/>
            <clip pos="1" side="tl" part="whole"/>
            <lit v="/"/>
            <var n="cur_subj"/>
          </lu>
        </out>
      </action>
    </rule>


  </section-rules>
</transfer>
